import os
import click
import asyncio
import pandas as pd
from process import Process
from cache import Cache
from rich.console import Console

console = Console()

@click.command()
@click.option('--input_file', required=True, help='≈öcie≈ºka do pliku CSV z danymi.')
@click.option('--output_file', default='output.csv', help='≈öcie≈ºka do pliku, gdzie zapisane zostanƒÖ zaktualizowane dane.')
@click.option('--use_cache', is_flag=True, help='Czy u≈ºywaƒá cache do przyspieszenia wyszukiwa≈Ñ?')
@click.option('--verbose', is_flag=True, help='Wy≈õwietlaj szczeg√≥≈Çowe informacje o przebiegu.')
@click.option('--social', is_flag=True, help='Uzupe≈Çniaj brakujƒÖce profile spo≈Çeczno≈õciowe.')
@click.option('--hours', is_flag=True, help="Pobierz godziny otwarcia z Google Maps.")
def main(input_file, output_file, use_cache, verbose, social, hours):
    """
    Skrypt uzupe≈Çnia brakujƒÖce dane w pliku CSV poprzez wyszukiwanie informacji na Google.
    Plik CSV nale≈ºy zapodaƒá przez --input_file, a wynik zostanie zapisany w --output_file.
    """
    
    if not social and not hours:
        console.print("[bold red]‚ùå Nie wybrano funkcji. U≈ºyj --help, aby zobaczyƒá dostƒôpne opcje.[/bold red]")
        click.echo(main.get_help(click.Context(main)))
        return

    # Pr√≥ba wczytania pliku CSV
    try:
        df = pd.read_csv(input_file)
        console.print(f"[bold green]‚úÖ Wczytano plik {input_file}.[/bold green]")
    except FileNotFoundError:
        console.print(f"[bold red]‚ùå Plik {input_file} nie zosta≈Ç znaleziony.[/bold red]")
        return
    except Exception as e:
        console.print(f"[bold red]‚ùå B≈ÇƒÖd przy wczytywaniu pliku: {e}[/bold red]")
        return

    # Inicjalizacja cache (je≈õli wybrano opcjƒô)
    cache = Cache() if use_cache else None

    # Przetwarzanie danych spo≈Çeczno≈õciowych
    if social:
        try:
            df, found_count, missing_count = asyncio.run(Process.process_social_data(df, cache, verbose))
            console.print(f"[bold green]‚úÖ Przetworzono {found_count} znalezionych rekord√≥w i {missing_count} brakujƒÖcych.[/bold green]")
        except Exception as e:
            console.print(f"[bold red]‚ùå B≈ÇƒÖd przy przetwarzaniu danych spo≈Çeczno≈õciowych: {e}[/bold red]")
            return

    # Przetwarzanie godzin otwarcia
    if hours:
        try:
            df = asyncio.run(Process.process_hours(df, verbose))
        except Exception as e:
            console.print(f"[bold red]‚ùå B≈ÇƒÖd przy przetwarzaniu godzin otwarcia: {e}[/bold red]")
            return

    # Zapisanie zaktualizowanego pliku CSV
    output_dir = os.path.dirname(output_file)
    if output_dir and not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir, exist_ok=True)
            console.print(f"[bold green]üìÅ Utworzono katalog: {output_dir}[/bold green]")
        except OSError as exc:
            console.print(f"[bold red]‚ùå B≈ÇƒÖd podczas tworzenia katalogu: {exc}[/bold red]")
            return
    
    try:
        df.to_csv(output_file, index=False)
        console.print(f"[bold green]‚úÖ Zapisano zaktualizowany plik CSV w {output_file}.[/bold green]")
    except Exception as e:
        console.print(f"[bold red]‚ùå B≈ÇƒÖd podczas zapisu pliku CSV: {e}[/bold red]")
        return

    # Zapis cache (je≈õli u≈ºywany)
    if cache:
        cache.save_cache()

if __name__ == "__main__":
    main()