from selenium import webdriver
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup
import time
from rich.console import Console
from rich.tree import Tree
from rich.live import Live
from rich.panel import Panel

console = Console()

async def search_google(query, verbose=False):
    # Uruchomienie ChromeDrivera
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # Opcja bez interfejsu graficznego
    driver = webdriver.Chrome(options=options)

    try:
        search_url = f"https://www.google.es/search?q={query}"
        driver.get(search_url)

        # Opcjonalnie: dodaj op√≥≈∫nienie, aby wyniki mia≈Çy czas na za≈Çadowanie
        time.sleep(2)

        # Pobierz ≈∫r√≥d≈Ço strony
        page_source = driver.page_source

        # Przetwarzanie HTML za pomocƒÖ BeautifulSoup
        soup = BeautifulSoup(page_source, 'html.parser')

        # Filtrowanie wynik√≥w wyszukiwania Google - tylko rzeczywiste wyniki
        search_results = soup.find_all('div', class_='tF2Cxc', limit=5)  # 'tF2Cxc' to klasa div dla wynik√≥w wyszukiwania

        # Tworzenie drzewa wynik√≥w
        tree = Tree(f"üåê Wyniki wyszukiwania dla zapytania: '{query}'")

        if search_results:
            for result in search_results:
                # Pobieranie tytu≈Çu wyniku
                title = result.find('h3').text if result.find('h3') else "Brak tytu≈Çu"
                
                # Pobieranie linku
                link = result.find('a')['href'] if result.find('a') else "Brak linku"

                # Dodawanie do drzewa wynik√≥w
                tree.add(f"[blue]{title}[/blue] -> [green]{link}[/green]")
        else:
            tree.add("[red]Brak wynik√≥w wyszukiwania[/red]")

        # Wy≈õwietlanie drzewa wynik√≥w
        if verbose:
            console.print(Panel(tree, title="Drzewo wynik√≥w wyszukiwania", expand=False))

        # Znajdowanie link√≥w spo≈Çeczno≈õciowych na podstawie tych wynik√≥w
        links = soup.find_all('a', href=True)
        social_links = {
            'instagram': None,
            'tiktok': None,
            'facebook': None,
            'youtube': None,
            'tripadvisor': None,
            'thefork': None
        }

        for link in links:
            href = link['href']
            if 'instagram.com' in href and not social_links['instagram']:
                social_links['instagram'] = href
            elif 'tiktok.com' in href and not social_links['tiktok']:
                social_links['tiktok'] = href
            elif 'facebook.com' in href and not social_links['facebook']:
                social_links['facebook'] = href
            elif 'youtube.com' in href and not social_links['youtube']:
                social_links['youtube'] = href
            elif 'tripadvisor.com' in href and not social_links['tripadvisor']:
                social_links['tripadvisor'] = href
            elif 'thefork.com' in href and not social_links['thefork']:
                social_links['thefork'] = href

        # Zwracanie znalezionych link√≥w spo≈Çeczno≈õciowych
        return social_links

    except Exception as e:
        if verbose:
            console.print(f"‚ùå [red]Error during search[/red]: {str(e)}")
        return -1

    finally:
        driver.quit()